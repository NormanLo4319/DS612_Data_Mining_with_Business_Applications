result = euclidean(as.name(sprintf("Row%d", i)), test)
print(result)
}
print(as.name('Row1'))
print(assign('Row1'))
print(eval(parse(text='Row1'))
print(eval(parse(text='Row1')))
eval(parse(text='Row1'))
eval(parse(text='row1'))
for (i in (1:5)) {
print(sprintf("Row%d", i))
result = euclidean(eval(parse(sprintf("row%d", i))), test)
print(result)
}
result = euclidean(eval(parse(text=sprintf("row%d", i))), test)
for (i in (1:5)) {
print(sprintf("Row%d", i))
result = euclidean(eval(parse(text=sprintf("row%d", i))), test)
print(result)
}
matrix = rbind(row1, row2, row3, row4, row5)
View(matrix)
matrix[1,1]
matrix[1,]
matrix[1,][1]
for (i in (1:5)) {
print(matrix[i,])
for (j in (1:6)) {
print(matrix[i,][j])
}
}
for (i in (1:5)) {
print(matrix[i,])
result = euclidean(matrix[i,], test)
print(result)
}
len(matrix)
lenght(matrix)
dim(matrix)
dim(matrix)[1]
range(dim(matrix)[1])
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix[1])){
print(i)
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
return(m, s, r)
}
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix)[1]){
print(i)
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
return(m, s, r)
}
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix)[1]){
print(i)
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
return c(m, s, r)
}
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix)[1]){
print(i)
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
result = c(m, s, r)
}
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix)[1]){
print(i)
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
result = c(m, s, r)
print(result)
}
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix)[1]){
print(sprintf("row%d",i))
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
result = c(m, s, r)
print(sprintf("Mean: %s", result[1]))
print(sprintf("Standard Deviation: %s", result[2]))
print(sprintf("Range: [ %s", result[3], ", %s", result[4], "]"))
}
sprintf("Range: [ %s", result[3], ", %s", result[4], "]")
sprintf("Range: [ %s , %s", result[3], "]")
sprintf("Range: [ %s , %s", result[3], result[4] "]")
sprintf("Range: [", result[3], ", ", result[4] "]")
sprintf("Range: [", result[3], ", ", result[4], "]")
paste0("Range: [", result[3], ", ", result[4], "]")
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix)[1]){
print(sprintf("row%d",i))
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
result = c(m, s, r)
print(sprintf("Mean: %s", result[1]))
print(sprintf("Standard Deviation: %s", result[2]))
print(paste0("Range: [", result[3], ", ", result[4], "]"))
}
for (i in (1:5)) {
print(sprintf("Row%d", matrix[i,]))
result = euclidean(matrix[i,], test)
print(result)
}
print(sprintf("Row%d", i): matrix[i,])
for (i in (1:5)) {
print(matrix[i,])
result = euclidean(matrix[i,], test)
print(result)
}
# Let suppose we are trying to get the mean, sd, and range for the 5 rows of data.
for (i in 1:dim(matrix)[1]){
print(sprintf("row%d",i))
m = mean(eval(parse(text=sprintf("row%d", i))))
s = sd(eval(parse(text=sprintf("row%d", i))))
r = range(eval(parse(text=sprintf("row%d", i))))
result = c(m, s, r)
print(sprintf("Mean: %.3f", result[1]))
print(sprintf("Standard Deviation: %.3f", result[2]))
print(paste0("Range: [", result[3], ", ", result[4], "]"))
}
# Import ISLR library
require(ISLR)
# Importing xlsx package for exporting data set to xlsx format
install.packages('xlsx')
library("xlsx")
names(Default)
?Default
write.xlsx(Default, 'Data\\Textbook_Data\\Default.xlsx', row.names=FALSE)
# Call out the Smarket data set
names(Smarket)
# print summary of the data set
summary(Smarket)
# Export dataset to csv file
write.csv(Smarket, 'Data\\Textbook_Data\\Smarket.csv', row.names=FALSE)
# Learning more about the data set
?Smarket
# Plot the pairs correlation of the data
pairs(Smarket,col=Smarket$Direction)
# Logistic Regression
# Use the General Linear Model function to build the logistic regression model.
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
# Print the summary of the fitted model
summary(glm.fit)
# Generate the probabilyt function based on the fitted model for prediction
glm.probs <- predict(glm.fit,type="response")
# Use the probability function to predict the first five observations in the data
# It will return the probability for going up the next day
glm.probs[1:5]
# We can also use the ifelse() function to change the return values
# If the probabiliyt is over 50%, it will return "Up", else it will return "Down"
glm.pred <- ifelse(glm.probs>0.5,"Up","Down")
# Compare the return values to the previous
# As you observed, the probability function is nested to this new prediction function
glm.pred[1:5]
# We can attach the Smarket data set for convenience
attach(Smarket)
# Check the model prediction to the actual data
table(glm.pred,Direction)
# We can measure the accuracy of the model prediction by taking the mean of the correct results
mean(glm.pred == Direction)
# We can also check the error of the model prediction by reversing the measure
mean(glm.pred != Direction)
# For better accuracy check, we are going to split our data into training and testing sets
# Make training and testing set
# Training data will be the data with year before 2005
train <- Year<2005
# Use the glm() function to build the logistic regression model on the training data
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
summary(glm.fit)
# Create the probability function by using the fitted model
glm.probs <- predict(glm.fit,newdata=Smarket[!train,],type="response")
# Create the prediction function by defining the results with threshold 50% or above
glm.pred <- ifelse(glm.probs >0.5,"Up","Down")
# Compare the prediction with the testing data
Direction.2005 <- Smarket$Direction[!train]
# Present the comparison in a matrix table
table(glm.pred,Direction.2005)
# Calculate the accuracy for the prediction
mean(glm.pred == Direction.2005)
# We can also find the error rate for the prediction
mean(glm.pred != Direction.2005)
# In the previous model, we found that the lag1 and lag2 are the best predictors in the model
# Let's build a smaller model with just lag1 and lag2 for the logistic regression model
glm.fit <- glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs <- predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred <- ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred == Direction.2005)
mean(glm.pred != Direction.2005)
# Now, we are going to study the Linear Discriminant Analysis
# The LDA requires the library MASS
require(MASS)
# Linear Discriminant Analysis
# Using lda() function for the linear discriminant analysis with lag1 and lag2
lda.fit <- lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
# Check the model fit
lda.fit
# Plot the model fit
plot(lda.fit)
# Plot the model fit
plot(lda.fit)
# Define the testing data year = 2005 for testing
Smarket.2005 <- subset(Smarket,Year==2005)
# Use the fitted model to make the prediction using the testing data
lda.pred <- predict(lda.fit,Smarket.2005)
# Predict the first 5 observations
lda.pred$class[1:5]
# Show the prediction in a data frame
data.frame(lda.pred)[1:5,]
# Compare the prediction and testing data in a matrix table
table(lda.pred$class,Smarket.2005$Direction)
# Check the accuracy from the LDA model
mean(lda.pred$class==Smarket.2005$Direction)
# Quadratic Discriminant Analysis
# Using qda() function for the linear discriminant analysis with lag1 and lag2
qda.fit <- qda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
# Check the model fit
qda.fit
library(klaR)
partimat(Direction~Lag1+Lag2,data=Smarket,method="qda")
# Define the testing data year = 2005 for testing
Smarket.2005 <- subset(Smarket,Year==2005)
# Use the fitted model to make the prediction using the testing data
qda.pred <- predict(qda.fit,Smarket.2005)
# Predict the first 5 observations
qda.pred$class[1:5]
print(qda.pred)
# Show the prediction in a data frame
data.frame(lda.pred)[1:5,]
# Compare the prediction and testing data in a matrix table
table(qda.pred$class,Smarket.2005$Direction)
# Check the accuracy from the LDA model
mean(qda.pred$class==Smarket.2005$Direction)
# K-Nearest Neighbors
# The KNN method, we need to import library 'class'
library(class)
# Attached the Smarket data set
attach(Smarket)
# Creating the lag variable, which includes lag1 and lag2
Xlag <- cbind(Lag1,Lag2)
# Create the training data for data before the year 2005
train <- Year<2005
# Use the knn() function to input the training set, testin set, and response variable (Direction)
# Note that we give the parameter k = 1, which defines the number of neighbor
knn.pred <- knn(Xlag[train,],Xlag[!train,],Direction[train],
k=1, prob=FALSE)
# Compare the prediction and the testing data in a matrix table
table(knn.pred,Direction[!train])
# Check the accuracy of the fitted model
mean(knn.pred == Direction[!train])
# Import ISLR library
require(ISLR)
# Call out the Smarket data set
names(Smarket)
# print summary of the data set
summary(Smarket)
# Export dataset to csv file
write.csv(Smarket, 'Data\\Textbook_Data\\Smarket.csv', row.names=FALSE)
# Plot the pairs correlation of the data
pairs(Smarket,col=Smarket$Direction)
# Logistic Regression
# Use the General Linear Model function to build the logistic regression model.
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
# Print the summary of the fitted model
summary(glm.fit)
# Generate the probabilyt function based on the fitted model for prediction
glm.probs <- predict(glm.fit,type="response")
# Use the probability function to predict the first five observations in the data
# It will return the probability for going up the next day
glm.probs[1:5]
# We can also use the ifelse() function to change the return values
# If the probabiliyt is over 50%, it will return "Up", else it will return "Down"
glm.pred <- ifelse(glm.probs>0.5,"Up","Down")
# Compare the return values to the previous
# As you observed, the probability function is nested to this new prediction function
glm.pred[1:5]
# We can attach the Smarket data set for convenience
attach(Smarket)
# Check the model prediction to the actual data
table(glm.pred,Direction)
# We can measure the accuracy of the model prediction by taking the mean of the correct results
mean(glm.pred == Direction)
# We can also check the error of the model prediction by reversing the measure
mean(glm.pred != Direction)
# For better accuracy check, we are going to split our data into training and testing sets
# Make training and testing set
# Training data will be the data with year before 2005
train <- Year<2005
# Use the glm() function to build the logistic regression model on the training data
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
summary(glm.fit)
# Create the probability function by using the fitted model
glm.probs <- predict(glm.fit,newdata=Smarket[!train,],type="response")
# Create the prediction function by defining the results with threshold 50% or above
glm.pred <- ifelse(glm.probs >0.5,"Up","Down")
# Compare the prediction with the testing data
Direction.2005 <- Smarket$Direction[!train]
# Present the comparison in a matrix table
table(glm.pred,Direction.2005)
# Calculate the accuracy for the prediction
mean(glm.pred == Direction.2005)
# We can also find the error rate for the prediction
mean(glm.pred != Direction.2005)
# In the previous model, we found that the lag1 and lag2 are the best predictors in the model
# Let's build a smaller model with just lag1 and lag2 for the logistic regression model
glm.fit <- glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs <- predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred <- ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred == Direction.2005)
mean(glm.pred != Direction.2005)
# Now, we are going to study the Linear Discriminant Analysis
# The LDA requires the library MASS
require(MASS)
# Linear Discriminant Analysis
# Using lda() function for the linear discriminant analysis with lag1 and lag2
lda.fit <- lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
# Check the model fit
lda.fit
# Plot the model fit
plot(lda.fit)
# Define the testing data year = 2005 for testing
Smarket.2005 <- subset(Smarket,Year==2005)
# Use the fitted model to make the prediction using the testing data
lda.pred <- predict(lda.fit,Smarket.2005)
# Predict the first 5 observations
lda.pred$class[1:5]
# Check the class in the prediction function
class(lda.pred)
# Show the prediction in a data frame
data.frame(lda.pred)[1:5,]
# Compare the prediction and testing data in a matrix table
table(lda.pred$class,Smarket.2005$Direction)
# Check the accuracy from the LDA model
mean(lda.pred$class==Smarket.2005$Direction)
# Quadratic Discriminant Analysis
# Using qda() function for the linear discriminant analysis with lag1 and lag2
qda.fit <- qda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
# Check the model fit
qda.fit
library(klaR)
partimat(Direction~Lag1+Lag2,data=Smarket,method="qda")
# Define the testing data year = 2005 for testing
Smarket.2005 <- subset(Smarket,Year==2005)
# Use the fitted model to make the prediction using the testing data
qda.pred <- predict(qda.fit,Smarket.2005)
# Predict the first 5 observations
qda.pred$class[1:5]
print(qda.pred)
# Show the prediction in a data frame
data.frame(lda.pred)[1:5,]
# Compare the prediction and testing data in a matrix table
table(qda.pred$class,Smarket.2005$Direction)
# Check the accuracy from the QDA model
mean(qda.pred$class==Smarket.2005$Direction)
# K-Nearest Neighbors
# The KNN method, we need to import library 'class'
library(class)
# Check the knn() function
?knn
# Attached the Smarket data set
attach(Smarket)
# Creating the lag variable, which includes lag1 and lag2
Xlag <- cbind(Lag1,Lag2)
# Create the training data for data before the year 2005
train <- Year<2005
# Use the knn() function to input the training set, testin set, and response variable (Direction)
# Note that we give the parameter k = 1, which defines the number of neighbor
knn.pred <- knn(Xlag[train,],Xlag[!train,],Direction[train],
k=1, prob=FALSE)
# Compare the prediction and the testing data in a matrix table
table(knn.pred,Direction[!train])
# Check the accuracy of the fitted model
mean(knn.pred == Direction[!train])
install.packages(tidyverse)
library(tidyverse)
getwd
getwd()
income <- read.csv("./Data/Textbook_Data/income3.csv)
income <- read.csv("./Data/Textbook_Data/Income3.csv)
income <- read.csv("Data/Textbook_Data/Income3.csv)
income <- read.csv("Data/Textbook_Data/Income3.csv", header = TRUE, na.string="?")
income <- read.csv("./Data/Textbook_Data/Income3.csv", header = TRUE, na.string="?")
summary(income)
View(income)
fit1 <- lm(Income~Education+Seniority+Gender, data=income)
summary(fit1)
fit2 <- lm(income~Education:Seniority, data=income)
summary(fit2)
fit2 <- lm(Income~Education:Seniority, data=income)
summary(fit2)
fit2 <- lm(Income~Education*Seniority, data=income)
summary(fit2)
default <- read.csv("./Data/Textbook_Data/Default.csv", header = TRUE, na.string="?")
summary(default)
dafault_nonstu <- default[student=="No"]
dafault_nonstu <- subset(default, student=="No")
attach(default_nonstu)
default_nonstu <- subset(default, student=="No")
attach(default_nonstu)
fit3 <- glm(default~balance+income, data=default_nonstu)
fit3 <- glm(default~balance+income, data=default_nonstu, family=binomial)
summary(fit3)
fit3 <- glm(default~balance*income, data=default_nonstu, family=binomial)
summary(fit3)
fit3 <- glm(default~balance*income, data=default, family=binomial)
summary(fit3)
fit3 <- glm(default~balance+income, data=default, family=binomial)
summary(fit3)
fit3 <- glm(default~balance+income, data=default_nonstu, family=binomial)
summary(fit3)
View(default_nonstu)
predict(fit3, c(2000, 50000))
predict(fit3, cbind(2000, 50000))
predict(fit3, 2000, 50000)
predict(fit3, c(2000, 50000))
?predict
Balance <- c(2000)
Income <- c(50000)
test <- data.frame(Balance, Income)
predict(fit3, test)
predict(fit3, newdata=test)
pred <- predict(fit3, newdata=test)
pred <- predict(fit3, newdata=data.frame(test=c(2000, 50000)))
View(test)
View(test)
View(default)
balance <- c(2000)
income <- c(50000)
test <- data.frame(balance, income)
pred <- predict(fit3, newdata=test)
pred
balance <- c(1000)
income <- c(50000)
test <- data.frame(balance, income)
pred <- predict(fit3, newdata=test)
pred
pred
View(test)
balance <- c(1000)
income <- c(50000)
test <- data.frame(balance, income)
pred <- predict(fit3, newdata=test)
pred
balance <- c(2000)
income <- c(50000)
test <- data.frame(balance, income)
pred <- predict(fit3, newdata=test)
pred
balance <- c(2000)
income <- c(40000)
test <- data.frame(balance, income)
pred <- predict(fit3, newdata=test)
pred
balance <- c(3000)
income <- c(40000)
test <- data.frame(balance, income)
pred <- predict(fit3, newdata=test)
pred
View(fit3)
balance <- c(2000)
income <- c(50000)
test <- data.frame(balance, income)
pred <- predict(fit3, newdata=test)
pred
pred <- predict(fit3, newdata=default, type="response")
pred
prob <- predict(fit3, newdata=default, type="response")
pred <- ifelse(prob >0.5,"Yes","No")
pred.head()
pred
table(pred,default)
detach(default_nonstu)
table(pred,default)
table(pred, default)
View(default)
table(pred, default$default)
mean(pred == default)
prob <- predict(fit3, newdata=default, type="response")
pred <- ifelse(prob >0.7,"Yes","No")
table(pred, default$default)
mean(pred == default)
pred <- ifelse(prob >0.3,"Yes","No")
table(pred, default$default)
mean(pred == default)
fit4 <- lda(default~balance+income, data=default_nonstu)
require(MASS)
fit4 <- lda(default~balance+income, data=default_nonstu)
summary(fit4)
fit4
prob <- predict(fit4, newdata=defaul, type="response")
pred <- ifelse(prob > 0.5, "Yes", "No")
table(pred, default$default)
mean(pred==default)
