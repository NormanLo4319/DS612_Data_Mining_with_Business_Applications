# Run the logistric regression model
log_fit <- glm(ob ~ age + age2 + male + highsch + college + income + white + black + asian + strenuouswork + read + highschread + collegeread,
data = data)
summary(log_fit)
wald.test(b = coef(log_fit), Sigma = vcov(mylogit), Terms = 12:13)
confint(log_fit)
log_fit2 <- glm(ob ~ age + age2 + male + highsch + college + income + white + black + asian + strenuouswork + read + highschread + collegeread,
data = data,
family = binomial(link="logit"))
summary(log_fit2)
log_fit2 <- glm(ob ~ age + age2 + male + highsch + college + income + white + black + asian + strenuouswork,
data = data,
family = binomial(link="logit"))
summary(log_fit2)
# Print fit summary
summary(log_fit2)
# Print fit summary
summary(log_fit2)
# Read the csv file into data
data <- read.csv(file="census_data.csv", header=TRUE, sep=",")
# print(data[1])
# Print data summary
summary(data)
# Run the multivariable linear regression model
fit <- lm(formula = BMI1 ~ age + age2 + male + highsch + college + income + white + black + asian + strenuouswork + read + highschread + collegeread,
data = data)
# Print the fit summary
summary(fit)
# Run the logistric regression model
log_fit <- glm(ob ~ age + age2 + male + highsch + college + income + white + black + asian + strenuouswork + read + highschread + collegeread,
data = data,
family = binomial(link="logit"))
# Print the fit summary
summary(log_fit)
# Print the confident intervals for the estimated parameters
confint(log_fit)
# Logistic regression model dropping read, highschread, and collegeread
log_fit2 <- glm(ob ~ age + age2 + male + highsch + college + income + white + black + asian + strenuouswork + read,
data = data,
family = binomial(link="logit"))
# Print fit summary
summary(log_fit2)
# Create a complex number z
z = complex(x, y)
# Define your data and formating it
# Create variable of x
x = 5
# Create variable of y
y = 5.55
# Create a complex number z
z = complex(x, y)
z
# Importing data from the existing data file (CSV & Excel)
install.packages("rmarkdown")
# Importing data from the existing data file (CSV & Excel)
data <- read.csv("./data/donors2008.csv")
# Importing data from the existing data file (CSV & Excel)
data <- read.csv("~/data/donors2008.csv")
# Importing data from the existing data file (CSV & Excel)
data <- read.csv("C:/Desktop/USF/2019_Summer_Boot_Camp/data/donors2008.csv")
# Importing data from the existing data file (CSV & Excel)
data <- read.csv("C:/Users/lokma/Desktop/USF/2019_Summer_Boot_Camp/data/donors2008.csv")
data
str(data)
summary(data)
plot(data)
# Loading data fom excel file
data2 <- read.csv("C:/Users/lokma/Desktop/USF/2019_Summer_Boot_Camp/data/crime_data.csv")
# Loading data fom excel file
require(xlsx)
# Loading data fom excel file
install.package("xlsx")
# Getting the 2nd to 4th element in an array
v[2:4]
# Creating a vector of data
v <- c (1, 2,3, 4, 5)
# Getting the 2nd to 4th element in an array
v[2:4]
v[1]
data.class
str(data)
# Printing the summary of the data
summary(data)
data <- read.csv(url("https://github.com/NormanLo4319/USF-Summer-Boot-Camp/blob/master/data/donors2008.csv"))
# Loading data from CSV file
filepath <- "https://github.com/NormanLo4319/USF-Summer-Boot-Camp/blob/master/data/donors2008.csv"
data <- read.csv(url(filepath))
# Loading data from CSV file
filepath <- "https://raw.github.com/NormanLo4319/USF-Summer-Boot-Camp/blob/master/data/donors2008.csv"
data <- read.csv(url(filepath))
# Loading data from CSV file
filepath <- "https://github.com/NormanLo4319/USF-Summer-Boot-Camp/blob/master/data/donors2008.csv"
data <- read.csv(url(filepath))
A = matrix(c(1:9), ncol=3)
View(A)
View(A)
det(A)
solve(A)
A
A = matrix(c(1:9), nrow=3)
A
A = matrix(c(1:9), ncol=3)
A
t(A)
A = t(A)
det(A)
solve(A)
# Create matrix in R
A = matrix(c(1, 2, 3,
4, 5, 6,
7, 8, 9),
nrow=3, byrow=TRUE)
det(A)
A
# Create matrix in R
A = matrix(c(1, 2, 3,
-4, -5, -6,
7, 8, 9),
nrow=3, byrow=TRUE)
A
det(A)
View(A)
View(A)
det(A)
# Create matrix in R
A = matrix(c(1, 2, 3,
-4, -5, -6,
7, -8, 9),
nrow=3, byrow=TRUE)
A
det(A)
# Create matrix in R
d = matrix(c(10, 20, 30), nrow=3, byrow=TRUE)
d
# Solving the variable matrix x
solve(A, d)
max(w)
# Generate 10 random numbers in R
w = runif(10, min=0, max=100)
max(w)
min(w)
range(w)
quantile(w, .90)
# Median of the array
median(w)
# Mean/Average of the array
mean(w)
# Mode of the array
mode(w)
# Variance of array w
var(w)
# Standard deviation of array w
sqrt(var(w))
summary(w)
general_heights <- read.csv("C:/Users/lokma/Desktop/USF/2019_Summer_Boot_Camp/data/geeral_heights.csv")
general_heights <- read.csv("C:/Users/lokma/Desktop/USF/2019_Summer_Boot_Camp/data/general_heights.csv")
wba_heights <- read.csv("C:/Users/lokma/Desktop/USF/2019_Summer_Boot_Camp/data/wba_data.csv")
summary(general_heights)
summary(wba_heights)
# Ploting the height distribution for the general heights data set
hist(general_heights)
# Ploting the height distribution for the general heights data set
hist(general_heights, aes(x=height))+geom_histogram()
mode(general_heights)
mode(general_heights[0])
general_heights[0]
library(ggplot2)
# Ploting the height distribution for the general heights data set
hist(general_heights, aes(x=height))+geom_histogram()
# Ploting the height distribution for the general heights data set
ggplot(general_heights, aes(x=height))+geom_histogram()
library(ggplot2)
# Ploting the height distribution for the general heights data set
ggplot(general_heights, aes(x=height))+geom_histogram()
ggplot(wba_heights, aes(x=height))+geom_histogram()
# Ploting the height distribution for the general heights data set
ggplot(general_heights, aes(x=height))+geom_histogram()
ggplot(wba_heights, aes(x=height))+geom_histogram(alpha=0.2, position="identity")
# Ploting the height distribution for the general heights data set
ggplot(general_heights, aes(x=height))+geom_histogram()
ggplot(wba_heights, aes(x=height))+geom_histogram(alpha=0.2, position="identity")
# Reading the food environment data
health <- read.csv("C:/Users/lokma/Desktop/USF/2019_Summer_Boot_Camp/data/food_env_data.csv")
ggplot(health, aes(x=Percent.Obesity, y = Percent.Diabetes))+geom_point()
# t-TEst for general and WBA heights data
g_height <- general_heights[0]
View(g_height)
View(g_height)
View(g_height)
View(g_height)
View(g_height)
# t-TEst for general and WBA heights data
g_height <- general_heights["height"]
View(g_height)
View(g_height)
wba_height <- wba_height["height"]
wba_height <- wba_heights["height"]
t.test(g_height, wba_height)
t.test(g_height~wba_height)
t.test(g_height, wba_height)
x = c(1, 2, 8, 10, 3, 5, 13, 12, 6, 8)
y = c(4, 9, 2, 15, 10, 9, 9, 5, 12, 14)
z = c(12, 15, 10, 5, 4, 7, 11, 11, 3, 2)
var.test(x, y, z)
aov(x, y, z)
aov(x~y~z)
aov(x~y)
aov(base~x+y+z)
aov(x~y+z)
xyz = c(x, y, z)
aov(xyz)
aov(xyz~groups)
fit = lm(formula = xyz~groups)
groups = factor(rep(letters[1:3], each=10))
fit = lm(formula = xyz~groups)
anova(fit)
# Correlation matrix for the health data
cor(health)
# Correlation matrix for the health data
obs_data <- health["Percent.Diabetes", "Percent.Obesity"]
cor(health)
# Correlation matrix for the health data
obs_data <- health["Percent.Diabetes"]
# Correlation matrix for the health data
dia <- health["Percent.Diabetes"]
obs <- health["Percent.Obesity"]
cor(dia, obs)
# Linear Regression Model
fit <- lm(dia ~ obs)
# Linear Regression Model
fit <- lm(Percent.Diabetes ~ Percent.Obesity, data=health)
summary(fit)
# Plotting the data and the regression line
ggplot(health, ase(x=Percent.Obesity, y=Percent.Diabetes))+Geom_point(shape=1)+geom_smooth(method=lm)
# Plotting the data and the regression line
ggplot(health, aes(x=Percent.Obesity, y=Percent.Diabetes))+Geom_point(shape=1)+geom_smooth(method=lm)
# Plotting the data and the regression line
ggplot(health, aes(x=Percent.Obesity, y=Percent.Diabetes))+geom_point(shape=1)+geom_smooth(method=lm)
## Intro to R
data <- read.csv(",/data/donors2008.csv")
# Clearning and Manipulating Data
# Idicating which elements have a N/A value
test <- is.na(health)
test
# Create new dataset without missing data
newdata <- na.omit(health)
# Create a new vector from existing data
health$total_survey <- health$Survey.Diabetes + health$Survey.Obesity
# Multiplying/Dividing two columns
health$total_diabetes <- health$Survey.Diabetes * health$Percent.Diabetes / 100
# Log with a column
health$log_percent_obesity <- log(health$Percent.Obesity)
# Exponential with a column
health$exp_log_percent_obesity <- log(health$log_percent_obesity)
View(health)
View(health)
# Exponential with a column
health$exp_log_percent_obesity <- exp(health$log_percent_obesity)
View(health)
View(health)
# Random Numbers
# R has basic function to create random numbers
# Using runif() to creat a vector x with 50 random numbers (default from 0 - 1)
x = runif(50)
# Using rnorm() to create a vector z with 50 random z-scores (standardized scores in normal distribtion)
z = rnorm(50)
# Using rnorm() to create a vector t with 50 random t-scores (standardized scores with mean=5 and std=10)
t = rnorm(50,mean = 5, sd = 10)
# Plotting the data point in R can use the simple plot function plot()
plot(x,z)
# You can also give the graph labels on x and y axes
plot(x, z, xlab = "X-Axis", ylab = "Y-Axis")
# Using the histogram function hist() to display the distribution of z scores
hist(z)
# Reading Data from CSV file
# Note that when loading the data set into R, you have to realize the current working directory
# The na.string parameter is for R to replace the value specified "?" with "NA"
AutoData = read.csv("Data/Textbook_Data/Auto.csv",header = TRUE, na.string="?")
# We can also use the plot function to plot any two columns (variables) from the data frame
# Note that we are use the "$" to specify the columne name in the data frame
plot(AutoData$mpg,AutoData$weight)
names(Caravan)
# Import ISLR library
require(ISLR)
names(Caravan)
write.xlsx(Caravan, '.\\Data\\Caravan.csv', row.names=FALSE)
.
write.csv(Caravan, '\\Data\\Caravan.csv', row.names=FALSE)
write.csv(Caravan, 'C:\\Users\\lokma\\Desktop\\DS612\\DS612_Data_Mining_with_Business_Applications\\Data\\Textbook_Data\\Caravan.csv', row.names=FALSE)
# Import ISLR library
require(ISLR)
# Plot the data
pairs(Smarket,col=Smarket$Direction)
# For Loop Solution:
x <- c(10, 12, 2, 4, 5, 11, 3, 8, 6, 5)
count <- 0
for (i in x){
if (i > 5)
count = count+1
}
print(count)
if (i >= 5)
for (i in x){
if (i >= 5)
count = count+1
}
print(count)
count <- 0
for (i in x){
if (i >= 5)
count = count+1
}
print(count)
# Another use of For Loop is to run calcuation without repeating the work over and over
# Example: Multiply x by 5 and store the result into a new vector y
order <- 1:10
y <- c()
for (i in order){
result = x[i]*5
append(y, result)
}
print(y)
append(y, 5)
print(y)
# Another use of For Loop is to run calcuation without repeating the work over and over
# Example: Multiply x by 5 and store the result into a new vector y
order <- 1:10
y <- c()
for (i in order){
result <- x[i]*5
y <- append(y, result)
}
print(y)
# Another way for the same result is to create a vector 'w' with 10 zero value, then add the result to the zeros
w <- rep(0,10)
order <- 1:10
for (i in odrer){
result <- x[i]*5
w[i] <- w[i]+result
}
print(w)
# Another way for the same result is to create a vector 'w' with 10 zero value, then add the result to the zeros
w <- rep(0,10)
order <- 1:10
for (i in odrer){
result <- x[i]*5
w[i] <- result
}
print(w)
for (i in order){
result <- x[i]*5
w[i] <- result
}
print(w)
w[i] <- w[i]+result
for (i in order){
result <- x[i]*5
w[i] <- w[i]+result
}
print(w)
# Another way for the same result is to create a vector 'w' with 10 zero value, then add the result to the zeros
w <- rep(0,10)
print(w)
# Another way for the same result is to create a vector 'w' with 10 zero value, then add the result to the zeros
w <- rep(0,10)
order <- 1:10
for (i in order){
result <- x[i]*5
w[i] <- w[i]+result
}
print(w)
x <- 5
y <- 6
x + y
# Find out where is your working directory 'wd'
getwd()
# Setting the working directory for your project or work
setwd("C://Users//lokma//Desktop//DS612/DS612_Data_Mining_with_Business_Applications")
# Find out where is your working directory 'wd'
getwd()
# Updating the current libraries or packages in R environment
update.packages()
R.home
R.home(component = 'home')
# Setting the working directory for your project or work
setwd("C://Users//lokma//Desktop//DS612/DS612_Data_Mining_with_Business_Applications")
# Find out where is your working directory 'wd'
getwd()
# Open a R script file from the current working directory
file.edit('DS 612 - Lecture 1 R.R')
# Clear all the environment variables
rm(list = ls(all.names= TRUE)
# Clear all the environment variables
rm(list = ls(all.names= TRUE))
rm(list = ls())
# Find out where is your working directory 'wd'
getwd()
# Setting the working directory for your project or work
setwd("Your Directory Path!")
# Updating the current libraries or packages in R environment
update.packages()
# Create a new R script file from the current working directory
file.edit('Practice.R')
# Clear all the environment variables
rm(list = ls())
# Basic knowledge for Vectors and Matrices
# Using function c() to create a vector of elements or a list and store in a variable x
x <- c(2,7,5)
# There is a sequence function seq().
# If you want to find out what it is and how to use it, you can query by using the '?'
?seq
# Create a sequence from 4 to 10 and incremented by 1, then store it into a variable y
y <- seq(from =4 , to = 10, by = 1)
y
# Create a sequence starting at 4 and incremented by 5 with 3 steps, then store it into a variable y
y <- seq(from =4 , length = 3, by=5)
y
# Addition or subtraction
x+y
x-y
# Multiplication or Division
x*y
x/y
# Polynomial or Power
x^y
# Basic Data Index
# Extracting data from a vector or list by calling the data index
# Calling the second element in vector x
x[2]
# Calling the second to the third elements in vector x
x[2:3]
# Calling all the elements in vector x, but dropping the second element
x[-2]
# Calling all the elements in vector x, but dropping the first two elements
x[-c(1:2)]
# Basic Matrices
# Creating a 3 by 4 matrix with sequence from 1 to 12
# Keep in mind, the demansion of matrix in R is always defined by number of row (i) and column (j)
z <- matrix(seq(1:12),3,4)
z
# Calling the element at i=2 and j=2 position
z[2,2]
# Calling all the elements, but dropping the first row
z[-1,]
# Calling all the elements, but dropping the second column
z[,-2]
# Calling all the elements, but dropping the second and third columns
z[,-c(2:3)]
# Check the size of the matrix z
dim(z)
# Check the lenght of matrix z
length(z)
# List all the variables in the global environment in this project
ls()
# remove variable (vector) x from the global environment
rm(x)
# Random Numbers
# R has basic function to create random numbers
# Using runif() to creat a vector x with 50 random numbers (default from 0 - 1)
x <- runif(50)
x
# Using rnorm() to create a vector z with 50 random z-scores (standardized scores in normal distribtion)
z <- rnorm(50)
z
# Using rnorm() to create a vector t with 50 random t-scores (standardized scores with mean=5 and std=10)
t <- rnorm(50,mean = 5, sd = 10)
t
# Plotting the data point in R can use the simple plot function plot()
plot(x,z)
# You can also check the use of plot() by help function
?plot
# You can also give the graph labels on x and y axes
plot(x, z, xlab = "X-Axis", ylab = "Y-Axis")
# Using the histogram function hist() to display the distribution of z scores
hist(z)
# Using the histogram function hist() to display the distribution of t scores
hist(t)
# Creating a vector NN with 1,000,000 randomized standardized scores
NN <- rnorm(1000000)
# Plot the large sample size randomized standardized scores
hist(NN)
# We can also print the mean score, standard deviation, and variance of vector t
mean(t)
sd(t)
var(t)
# Reading Data from CSV file
# Note that when loading the data set into R, you have to realize the current working directory
# The na.string parameter is for R to replace the value specified "?" with "NA"
AutoData <- read.csv("Data/Textbook_Data/Auto.csv",header = TRUE, na.string="?")
# If there is NA elements in the table, then drop the entire row from the table
AutoData <- na.omit(AutoData)
# R has a summary function that helps getting the descriptive statistic of the data frame
summary(AutoData)
# We can also use the plot function to plot any two columns (variables) from the data frame
# Note that we are use the "$" to specify the columne name in the data frame
plot(AutoData$mpg,AutoData$weight)
# Instead of calling the columns name with "$", we can also attache the data frame on the search path
attach(AutoData)
# After the data frame is attached, we can use the columne names directly without specifying with the "$"
plot(mpg,weight)
plot(origin,mpg)
# We can also call out a specific column from the data frame and save it as "factor" (catagories)
# The purpose of doing this is because we can treat the column as catagory instead of numeric.
origin <- as.factor(origin)
# As you can see, the plot is not defined as box plot because "origin" is not treated as catagorical data
plot(origin,mpg)
# As you can see, the plot is not defined as box plot because "origin" is not treated as catagorical data
plot(origin,mpg)
# R has a pairs(), which returns a plot matrix consisting of scatter plots for each variable-combination of a data frame.
pairs(AutoData)
# We can also specify the columns in the data frame for the plot matrix
pairs(~mpg+cylinders+acceleration+weight)
