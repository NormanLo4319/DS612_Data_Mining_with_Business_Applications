}
}
}
for (i in 1:length(x)) {
for (j in 2:length(x)) {
print(x[i])
print(x[j])
}
}
for (i in 1:length(x)-1) {
for (j in 2:length(x)) {
print(x[i])
print(x[j])
}
}
i <- 1
x <- c(3, 6, 2, 4, 5, 6)
for (i in 1:length(x)-1) {
for (j in 2:length(x)) {
print(x[i])
print(x[j])
}
}
i <- 1
print(i)
for (i in (1:length(x)-1)){
print(i)
}
}
for (i in (1:length(x)-1)) {
for (j in 2:length(x)) {
print(x[i])
print(x[j])
}
}
i <- 1
for (i in (1:length(x)-1)) {
for (j in 2:length(x)) {
print(x[i])
print(x[j])
}
}
for (i in (1:length(x)-1)){
print(i)
}
for (i in (2:length(x)-1)){
print(i)
}
for (i in (2:length(x)-1)) {
for (j in 3:length(x)) {
print(x[i])
print(x[j])
}
}
for (i in (2:length(x)-1)) {
for (j in 2:length(x)) {
print(x[i])
print(x[j])
}
}
start <- 2
for (i in (start:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
}
}
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
}
}
start <- 1
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
}
}
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
return TRUE
}
}
}
start <- 1
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
return TRUE
}
}
}
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
print(TRUE)
}
}
}
return(TRUE)
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
return(TRUE)
}
}
}
start <- 1
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
return(TRUE)
}
}
}
for (i in (2:length(x)-1)){
print(i)
}
print(j)
for (i in (2:length(x)-1)){
print(i)
start <- start+1
for j in (start:length(x)) {
print(j)
}
}
start <- 1
for (i in (2:length(x)-1)){
print(i)
start <- start+1
for j in (start:length(x)) {
print(j)
}
}
for (i in (2:length(x)-1)){
print(i)
start <- start + 1
for j in (start:length(x)) {
print(j)
}
}
}
}
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in start:length(x)) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
return(TRUE)
}
}
}
for (i in (2:length(x)-1)){
print(i)
start <- start + 1
for (j in (start:length(x))){
print(j)
}
}
start <- 1
for (i in (2:length(x)-1)){
print(i)
start <- start + 1
for (j in (start:length(x))){
print(j)
}
}
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in (start:length(x))) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
return(TRUE)
}
}
}
start <- 1
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in (start:length(x))) {
print(x[i])
print(x[j])
if (x[i] == x[j]) {
return(TRUE)
}
}
}
# 1. Naive Linear Search
duplicate1 <- function(x) {
start <- 1
for (i in (2:length(x)-1)) {
start <- start + 1
for (j in (start:length(x))) {
if (x[i] == x[j]) {
return(TRUE)
}
}
}
return(FALSE)
}
duplicate1(x)
x <- c(1, 2, 3, 4, 5, 6)
duplicate1(x)
# 2. Sorting
duplicate2 <- function(x) {
sort(x)
for (i in (1:length(x))) {
if (x[i] == num[i+1])
return(TRUE)
}
return(FALSE)
}
duplicate2(x)
# 2. Sorting
duplicate2 <- function(x) {
sort(x)
for (i in (1:length(x))) {
if (x[i] == x[i+1])
return(TRUE)
}
return(FALSE)
}
duplicate2(x)
# 2. Sorting
duplicate2 <- function(x) {
sort(x)
for (i in (1:length(x))) {
if (x[i] == x[i+1]) {
return(TRUE)
}
}
return(FALSE)
}
duplicate2(x)
i <- 1
rm(x, j)
rm(i, j)
rm(i, j, start)
x <- c(1, 2, 3, 4, 5, 6)
y <- c(2, 4, 6, 8, 6, 10)
print(i)
for (i in (1:length(x))) {
print(i)
}
# 2. Sorting
duplicate2 <- function(x) {
sort(x)
for (i in (1:length(x)-1)) {
if (x[i] == x[i+1]) {
return(TRUE)
}
}
return(FALSE)
}
duplicate2(x)
rm(i)
# 2. Sorting
duplicate2 <- function(x) {
sort(x)
for (i in (1:length(x)-1)) {
if (x[i] == x[i+1]) {
return(TRUE)
}
}
return(FALSE)
}
duplicate2(x)
# 2. Sorting
duplicate2 <- function(x) {
sort(x)
for (i in (1:(length(x)-1))) {
if (x[i] == x[i+1]) {
return(TRUE)
}
}
return(FALSE)
}
duplicate2(x)
duplicate2(y)
duplicate1(y)
for (k in (1:(length(x)-1))) {
print(i)
print(i+1)
}
for (k in (1:(length(x)-1))) {
print(k)
print(k+1)
}
sort(x)
sort(y)
# 2. Sorting
duplicate2 <- function(x) {
sort(x)
for (i in (1:(length(x)-1))) {
if (x[i] == x[i+1]) {
return(TRUE)
}
}
return(FALSE)
}
duplicate2(y)
for (k in (1:(length(y)-1))) {
print(k)
print(k+1)
}
for (k in (1:(length(y)-1))) {
print(y[k])
print(y[k+1])
}
# 2. Sorting
duplicate2 <- function(x) {
x <- sort(x)
for (i in (1:(length(x)-1))) {
if (x[i] == x[i+1]) {
return(TRUE)
}
}
return(FALSE)
}
duplicate2(y)
duplicate2(x)
# 3. Hash Table
duplicate3 <- function(x) {
hash <- c()
j <- 1
for (i in x) {
if (is.element(i, hash[j]) == TRUE){
return(TRUE)
}
else {
hash[j] <- i
j <- j + 1
}
}
return(FALSE)
}
duplicate3(x)
duplicate3(y)
is.element(y[1], y)
for (i in x) {
print(i)
print(h[k])
if (is.element(i, hash[k]) == TRUE){
return(TRUE)
}
else {
k <- k+1
}
}
h <- c()
k <- 1
for (i in x) {
print(i)
print(h[k])
if (is.element(i, hash[k]) == TRUE){
return(TRUE)
}
else {
k <- k+1
}
}
if (is.element(i, h[k]) == TRUE){
return(TRUE)
}
for (i in x) {
print(i)
print(h[k])
if (is.element(i, h[k]) == TRUE){
return(TRUE)
}
else {
k <- k+1
}
}
h <- c()
k <- 1
for (i in y) {
print(i)
print(h[k])
if (is.element(i, h[k]) == TRUE){
return(TRUE)
}
else {
h[k] <- i
k <- k+1
}
}
for (i in y) {
print(i)
print(h[k])
if (is.element(i, h) == TRUE){
return(TRUE)
}
else {
h[k] <- i
k <- k+1
}
}
h <- c()
k <- 1
for (i in y) {
print(i)
print(h[k])
if (is.element(i, h) == TRUE){
return(TRUE)
}
else {
h[k] <- i
k <- k+1
}
}
h <- c()
k <- 1
for (i in y) {
print(i)
print(h)
if (is.element(i, h) == TRUE){
return(TRUE)
}
else {
h[k] <- i
k <- k+1
}
}
h <- c()
k <- 1
for (i in y) {
print(i)
print(h)
if (is.element(i, h) == TRUE){
print(TRUE)
}
else {
h[k] <- i
k <- k+1
}
}
# 3. Hash Table
duplicate3 <- function(x) {
hash <- c()
j <- 1
for (i in x) {
if (is.element(i, hash) == TRUE){
return(TRUE)
}
else {
hash[j] <- i
j <- j + 1
}
}
return(FALSE)
}
duplicate3(y)
duplicate3(x)
# In this section, we are going to use the tree-based methods for regresssion and classification.
# We first need to install the 'randomForest' and 'ISLR' packages
install.packages("randomForest")
install.packages("ISLR")
install.packages("tree")
# Import the libraries for analysis
library(randomForest)
library(ISLR)
library(tree)
library(MASS)
# Splitting data into training and testing sets (50/50)
set.seed(1)
NumberofObservations = dim(Boston)[1]
SplitofTrainTest = 0.5 #let's split the data 50/50
train = sample(1:NumberofObservations,NumberofObservations*SplitofTrainTest)
test = -train
trainingData = Boston[train,]
testingData  = Boston[test,]
Testing_outcome = Boston$medv[test]
# Bagging is simply a special case of random forest with m = p (All predictors are used to grow trees)
bag.boston = randomForest(medv~., data=trainingData, mtry=13, importance=TRUE)
# mtry is the number of variables randomly sampled as candidates at each slpit.
# The default is sqrt(p) in classification and p/3 in regression
# The default number of trees is 500
bag.boston
# Bagging is simply a special case of random forest with m = p (All predictors are used to grow trees)
bag.boston = randomForest(medv-., data=trainingData, mtry=13, importance=TRUE)
# Bagging is simply a special case of random forest with m = p (All predictors are used to grow trees)
bag.boston = randomForest(medv -., data=trainingData, mtry=13, importance=TRUE)
View(testingData)
# Bagging is simply a special case of random forest with m = p (All predictors are used to grow trees)
bag.boston = randomForest(medv - ., data=trainingData, mtry=13, importance=TRUE)
?Salary
?Hitters
dim(Hitters)
